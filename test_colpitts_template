using Serialization
using Random

Random.seed!(1234)

include("models.jl")
include("integrators.jl")
include("enoc.jl")
using .Models
using .Integrators
using .enoc

M = 30
D = 6
k = 30
k_r = 30

window = {window}
da = {da}
inflation = {inflation}

osc_vars = 1:D
modes = 2:3
model = Models.colpitts_true
model_err = Models.colpitts_err
integrator = Integrators.rk4
outfreq = 4
Δt = 0.1
m = 20
cycles = 1000
record_length = 25000
ens_err_pct = 0.2
obs_err_pct = 0.1
transient = 3000
mp = 5
y0 = rand(D)
varimax = false
check_bounds = false
y_fcst = true
α = 0.5

if !da
    info, ssa_info = enoc.run(model=model, model_err=model_err, M=M, D=D, k=k,
                              k_r=k_r, modes=modes, osc_vars=osc_vars,
                              integrator=integrator, outfreq=outfreq, Δt=Δt,
                              m=m, cycles=1000, window=window,
                              record_length=record_length,
                              ens_err_pct=ens_err_pct, obs_err_pct=obs_err_pct,
                              transient=transient, y0=y0, mp=mp,
                              varimax=varimax, da=false, inflation=inflation,
                              check_bounds=check_bounds, y_fcst=y_fcst, α=α,
                              preload="colpitts")

    mp = argmin(enoc.optimal_ens(info)[1])[1]
end

# Random.seed!(1234)

info, ssa_info = enoc.run(model=model, model_err=model_err, M=M, D=D, k=k,
                          k_r=k_r, modes=modes, osc_vars=osc_vars,
                          integrator=integrator, outfreq=outfreq, Δt=Δt, m=m,
                          cycles=cycles, window=window,
                          record_length=record_length, ens_err_pct=ens_err_pct,
                          obs_err_pct=obs_err_pct, transient=transient, y0=y0,
                          mp=mp, varimax=varimax, da=da, inflation=inflation,
                          check_bounds=check_bounds, y_fcst=y_fcst, α=α,
                          preload="colpitts")

serialize(open(string("out_colpitts_", ARGS[1]), "w"), info)
